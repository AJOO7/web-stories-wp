name: PHP Unit Tests

on:
  push:
    branches:
      - main
      - release/*
  pull_request:

jobs:
  unit-php:
    name: 'PHP ${{ matrix.php }} - WP ${{ matrix.wp }}'
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental == true }}
    strategy:
      matrix:
        php: ['7.0', '5.6']
        wp: ['latest']
        coverage: [false]
        include:
          - php: '7.4'
            wp: 'latest'
            coverage: true

          - php: '5.6'
            wp: '5.3'

          # Disabled until 8.0 Docker image is available.
          #
          #          - php: '8.0'
          #            wp: 'latest'

          - php: '7.4'
            wp: 'master'
            experimental: true

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Setup npm cache
        uses: pat-s/always-upload-cache@v2.1.3
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ env.cache-name }}-
            ${{ runner.os }}-npm-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci
        env:
          CI: true
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup Composer cache
        uses: pat-s/always-upload-cache@v2.1.3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            ${{ runner.os }}-

      # PHP-Scoper only works on PHP 7.2+ and we need to prefix our dependencies to accurately test them.
      # So we temporarily switch PHP versions, do a full install and then remove the package.
      # Then switch back to the PHP version we want to test and delete the vendor directory.

      - name: Setup PHP 7.4
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4
          tools: composer:v1

      - name: Install prefixed dependencies
        run: |
          composer install --prefer-dist --no-suggest --no-progress --no-interaction
          rm -rf vendor/*

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: composer:v1, cs2pr

        # TODO: Remove "latest" special case. See https://github.com/WordPress/gutenberg/issues/27763
      - name: Configure WordPress version
        run: |
          if [[ $WP_VERSION == 'master' ]]; then
            echo "Using WordPress version: $WP_VERSION"

            echo "{\"core\":\"WordPress/WordPress#${WP_VERSION}\"}" >> .wp-env.override.json
            exit 0
          fi

          if [[ $WP_VERSION == 'latest' ]]; then
            LATEST_VERSION=$(curl -s http://api.wordpress.org/core/version-check/1.7/ | jq -r '.offers[0].version')
            if [[ -z "$LATEST_VERSION" ]]; then
              echo "Latest WordPress version could not be found"
              exit 1
            fi

            echo "Found latest WordPress version: $LATEST_VERSION"
            WP_VERSION=$LATEST_VERSION
          fi

          echo "Using WordPress version: $WP_VERSION"

          echo "{\"core\":\"WordPress/WordPress#tags/${WP_VERSION}\"}" >> .wp-env.override.json

          echo "Installing matching version of wp-phpunit/wp-phpunit"

          composer require --prefer-dist --no-suggest --no-progress --no-interaction --no-scripts --dev wp-phpunit/wp-phpunit:${WP_VERSION}
        env:
          WP_VERSION: ${{ matrix.wp }}

      - name: Install dependencies
        run: |
          composer install --prefer-dist --no-suggest --no-progress --no-interaction --no-scripts
          composer dump-autoload --no-interaction

      - name: Start Docker environment
        run: npm run wp-env start -- --update
        env:
          WP_ENV_PHP_VERSION: ${{ matrix.php }}
        if: ${{ ! matrix.coverage }}

      - name: Start Docker environment with Xdebug
        run: npm run wp-env start -- --update --xdebug=coverage
        env:
          WP_ENV_PHP_VERSION: ${{ matrix.php }}
        if: ${{ matrix.coverage }}

      - name: Run tests
        run: |
          npm run test:php
          npm run test:php:multisite
        if: ${{ ! matrix.coverage }}

      - name: Run tests with coverage
        run: |
          npm run test:php:coverage
          npm run test:php:multisite:coverage
        if: ${{ matrix.coverage }}

      - name: Upload code coverage report
        uses: codecov/codecov-action@v1
        with:
          file: build/logs/*.xml
        if: ${{ matrix.coverage }}

      - name: Stop Docker environment
        run: npm run wp-env stop
        if: ${{ success() || failure() }}
